name: Docker Deploy to GCP

on:
  push:
    branches: [ feature/docker-deploy ]  # 可以改为你想要的分支
  pull_request:
    branches: [ feature/docker-deploy ]
    types: [ closed ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: deuspio/ai-agents  # 使用 Docker Hub

jobs:
  ci:
    name: "🏗️ CI - 构建和推送镜像"
    # 只在推送到指定分支或 PR 合并时运行
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    # 1. 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # 2. 设置 Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # 3. 登录到 Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # 4. 提取元数据
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    # 5. 构建并推送 Docker 镜像
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
        # 6. CI 构建总结和测试输出
    - name: CI Build Summary
      run: |
        echo "🎉 ============================================="
        echo "✅ CI 构建流程完成！"
        echo "🎉 ============================================="
        echo ""
        echo "📋 构建信息："
        echo "  - 🏷️  镜像标签: ${{ steps.meta.outputs.tags }}"
        echo "  - 🔐 镜像摘要: ${{ steps.build.outputs.digest }}"
        echo "  - 📦 镜像仓库: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "  - 🕐 构建时间: $(date)"
        echo "  - 🌿 分支: ${{ github.ref_name }}"
        echo "  - 📝 提交: ${{ github.sha }}"
        echo ""
        echo "🧪 测试用的镜像拉取命令："
        echo "  docker pull ${{ steps.meta.outputs.tags }}"
        echo ""
        echo "🚀 本地测试运行命令："
        echo "  docker run -d -p 8000:8000 \\"
        echo "    -e ENVIRONMENT=production \\"
        echo "    -e DATABASE_URL=mysql+pymysql://root:123456@host.docker.internal:3306/ai_agents \\"
        echo "    --name ai-agents-test \\"
        echo "    ${{ steps.meta.outputs.tags }}"
        echo ""
        echo "🌐 测试 API 端点："
        echo "  curl http://localhost:8000/docs"
        echo "  curl http://localhost:8000/"
        echo ""
        echo "📊 镜像详细信息："
        
    - name: Display Image Details
      run: |
        echo "🔍 镜像标签详情："
        echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | while read tag; do
          if [ -n "$tag" ]; then
            echo "  📌 $tag"
          fi
        done
        echo ""
        echo "🏷️ 镜像标签（JSON格式）："
        echo '${{ steps.meta.outputs.json }}' | jq '.'
        echo ""
        echo "📋 构建标签："
        echo "${{ steps.meta.outputs.labels }}" | tr ',' '\n' 