name: Docker Deploy to GCP

on:
  push:
    branches: [ feature/docker-deploy ]  # 可以改为你想要的分支
  pull_request:
    branches: [ feature/docker-deploy ]
    types: [ closed ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: deuspio/ai-agents  # 使用你的个人仓库

jobs:
  build-and-deploy:
    # 只在推送到指定分支或 PR 合并时运行
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    steps:
    # 1. 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # 2. 设置 Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # 3. 登录到 GitHub Container Registry
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # 4. 提取元数据
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    # 5. 构建并推送 Docker 镜像
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # 6. 配置 SSH
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.GCP_SSH_KEY_DOCKER }}
        known_hosts: unnecessary
        if_key_exists: replace
    
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H 34.129.46.22 >> ~/.ssh/known_hosts
    
    # 7. 部署到服务器
    - name: Deploy to GCP with Docker
      env:
        HOST: 34.129.46.22
        PROJECT_NAME: ai-agents
        IMAGE_TAG: ${{ steps.meta.outputs.tags }}
      run: |
        # 创建 Docker 部署脚本
        cat > docker-deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🐳 开始 Docker 容器化部署到 GCP 服务器..."
        
        # SSH 到服务器并执行 Docker 部署
        ssh root@$HOST << ENDSSH
        
        echo "📂 准备部署目录..."
        mkdir -p /root/ai-agents-docker
        cd /root/ai-agents-docker
        
        echo "🔑 登录到 GitHub Container Registry..."
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        
        echo "📥 拉取最新 Docker 镜像..."
        docker pull $IMAGE_TAG
        
        echo "🛑 停止现有容器..."
        docker-compose -f docker-compose.prod.yml down || true
        
                 echo "📝 创建生产环境 docker-compose 文件..."
         cat > docker-compose.prod.yml << 'COMPOSE_EOF'
         services:
           ai-agents-app:
             image: $IMAGE_TAG
             container_name: ai-agents-app
             restart: unless-stopped
             ports:
               - "8000:8000"
             environment:
               - ENVIRONMENT=production
               - DATABASE_URL=mysql+pymysql://root:123456@mysql:3306/ai_agents
               - CHROMA_PERSIST_DIRECTORY=/app/data/chroma_db
             volumes:
               - ./data/chroma_db:/app/data/chroma_db
               - ./logs:/app/logs
               - ./.env.prod:/app/.env.prod
             depends_on:
               - mysql
             healthcheck:
               test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
               interval: 30s
               timeout: 10s
               retries: 3
               start_period: 40s
         
           mysql:
             image: mysql:8.0
             container_name: ai-agents-mysql
             restart: unless-stopped
             environment:
               MYSQL_ROOT_PASSWORD: 123456
               MYSQL_DATABASE: ai_agents
             ports:
               - "3306:3306"
             volumes:
               - ./data/mysql:/var/lib/mysql
         COMPOSE_EOF
        
        echo "📁 创建必要的目录..."
        mkdir -p data/chroma_db data/mysql logs
        
        echo "🔧 创建生产环境配置文件..."
        cat > .env.prod << 'ENV_EOF'
        ENVIRONMENT=production
        DATABASE_URL=mysql+pymysql://root:123456@mysql:3306/ai_agents
        CHROMA_PERSIST_DIRECTORY=/app/data/chroma_db
        # 添加你的其他环境变量
        # OPENAI_API_KEY=your_openai_api_key_here
        ENV_EOF
        
        echo "🚀 启动新容器..."
        docker-compose -f docker-compose.prod.yml up -d
        
        echo "⏳ 等待服务启动..."
        sleep 30
        
        echo "🔍 检查容器状态..."
        docker-compose -f docker-compose.prod.yml ps
        
        echo "📋 检查应用日志..."
        docker-compose -f docker-compose.prod.yml logs --tail=20 ai-agents-app
        
        echo "🩺 健康检查..."
        if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/docs | grep -q "200"; then
          echo "✅ 应用服务正在运行"
        else
          echo "❌ 应用服务启动失败"
          docker-compose -f docker-compose.prod.yml logs ai-agents-app
          exit 1
        fi
        
        echo "🧹 清理旧镜像..."
        docker image prune -f
        
        echo "✅ Docker 容器化部署完成!"
        
        ENDSSH
        EOF
        
        chmod +x docker-deploy.sh
        ./docker-deploy.sh
    
    # 8. 部署总结
    - name: Deployment Summary
      run: |
        echo "✅ Docker 容器化部署流程完成!"
        echo "📋 部署信息："
        echo "  - 镜像: ${{ steps.meta.outputs.tags }}"
        echo "  - 容器名称: ai-agents-app"
        echo "  - 端口映射: 8000:8000"
        echo "  - 部署时间: $(date)"
        echo "  - 健康检查: http://34.129.68.205:8000/docs" 